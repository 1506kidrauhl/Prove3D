package com.projetopi.prove3dapp.telas;

import com.projetopi.prove3dapp.Config;
import com.projetopi.prove3dapp.dadosClasses.Processos;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

import com.projetopi.prove3dapp.tabelas.TabelaComputador;
import com.projetopi.prove3dapp.tabelas.TabelaProcessos;
import com.projetopi.prove3dapp.tabelas.TabelaUsuario;
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import oshi.SystemInfo;
import oshi.hardware.HardwareAbstractionLayer;
import oshi.software.os.OSProcess;
import oshi.software.os.OperatingSystem;
import oshi.util.FormatUtil;

@Component
public class TelaProcessos extends javax.swing.JFrame {

    Timer timer = new Timer(5000, new ChamarRelogio());

    TabelaComputador idComputador;
    TabelaUsuario idUsuario;

    @Autowired
    private Config config;

    @Autowired
    private Processos processos;

    /**
     * Creates new form TelaProcessos
     */
    public TelaProcessos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        lblQuantidade = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbProcessos = new javax.swing.JTable();
        cmbFiltro = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Prove 3D - Processos");
        setBackground(new java.awt.Color(199, 209, 217));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel2.setText("Quantidade de processos:");

        lblQuantidade.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        lblQuantidade.setText("0");

        jScrollPane1.setBackground(new java.awt.Color(199, 209, 217));

        tbProcessos.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        tbProcessos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "PID", "Processo", "Prioridade", "CPU", "Memória", "Tempo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbProcessos);
        if (tbProcessos.getColumnModel().getColumnCount() > 0) {
            tbProcessos.getColumnModel().getColumn(0).setResizable(false);
            tbProcessos.getColumnModel().getColumn(1).setResizable(false);
            tbProcessos.getColumnModel().getColumn(2).setResizable(false);
            tbProcessos.getColumnModel().getColumn(3).setResizable(false);
            tbProcessos.getColumnModel().getColumn(4).setResizable(false);
            tbProcessos.getColumnModel().getColumn(5).setResizable(false);
        }

        cmbFiltro.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        cmbFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "PID", "Processo", "Uso de CPU", "Uso de Memória" }));

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Filtrar por:");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        jLabel1.setText("Processos do computador");

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(lblQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127)
                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblQuantidade, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(cmbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        timer.stop();
    }//GEN-LAST:event_formWindowClosed

    public void disparaRelogio() {
        // Inicia o timer, para que a cada 5 seg, ele se repita
        timer.start();
    }

    class ChamarRelogio implements ActionListener {

        public void actionPerformed(ActionEvent e) {
            //Chamando o método que irá pegar os processos do sistema
            pegaProcessos();
        }
    }

    public void pegaProcessos() {

        //Instanciando classe SystemInfo para podermos pegarmos os dados de Hardware
        SystemInfo si = config.oshi();

        //Variável para coletar dados do Sistema
        OperatingSystem os = si.getOperatingSystem();

        //Setando, dentro da label, a quantidade de processos rodando no pc
        lblQuantidade.setText(String.valueOf(os.getProcessCount()));

        //Criando variável para filtro dos processos
        OperatingSystem.ProcessSort filtro;

        /*Switch para saber qual opção usuário escolheu na tela
        Obs: Funciona como faziamos no java script, pegando pelo value, ou no caso,
        pelo index selecionado da combo*/
        switch (cmbFiltro.getSelectedIndex()) {
            case 0://Caso tenha escolhido filtrar por PID
                filtro = OperatingSystem.ProcessSort.PID;
                break;
            case 1://Caso tenha escolhido filtrar por Processo
                filtro = OperatingSystem.ProcessSort.NAME;
                break;
            case 2://Caso tenha escolhido filtrar por Uso de CPU
                filtro = OperatingSystem.ProcessSort.CPU;
                break;
            default:/*Caso não seja nenhum dos anteriores, então com certeza é 
                pelo uso de memória*/
                filtro = OperatingSystem.ProcessSort.MEMORY;
                break;
        }

        List<TabelaProcessos> dadosProcessos = new ArrayList<>();
        processos.pegaProcessos(dadosProcessos, false, idComputador, idUsuario, filtro);

        /*Não podemos manipular a tabela apenas com seu nome de variável, então
        criamos um modelo de tabela que recebe a nossa tabela que está na tela*/
        DefaultTableModel tabela = (DefaultTableModel) tbProcessos.getModel();

        //Limpando a tabela na tela para poder atualizar os dados
        tabela.setNumRows(0);
        int hastag = 0;
        for (int i = 0; i < dadosProcessos.size(); i++) {

            TabelaProcessos proc = dadosProcessos.get(i);
            hastag++;
            tabela.addRow(new Object[]{
                hastag,
                 proc.getPid(),
                 proc.getProcesso(),
                 proc.getPrioridade(),
                 proc.getUsoCpu(),
                 proc.getUsoMemoria(),
                 proc.getTempoAtividade().toString().split(" ")[3]
            });
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaProcessos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaProcessos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaProcessos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaProcessos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaProcessos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbFiltro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblQuantidade;
    private javax.swing.JTable tbProcessos;
    // End of variables declaration//GEN-END:variables
}
